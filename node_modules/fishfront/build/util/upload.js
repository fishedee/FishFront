'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _imageCompresser = require('./upload/imageCompresser');

var _imageCompresser2 = _interopRequireDefault(_imageCompresser);

var _jpegMeta = require('./upload/jpegMeta');

var _jpegMeta2 = _interopRequireDefault(_jpegMeta);

var _env = require('../runtime/env');

var _env2 = _interopRequireDefault(_env);

var _base = require('../encoding/base64');

var _base2 = _interopRequireDefault(_base);

var _unique = require('./unique');

var _unique2 = _interopRequireDefault(_unique);

var _ajax = require('../net/ajax');

var _ajax2 = _interopRequireDefault(_ajax);

var _filereader = require('./filereader');

var _filereader2 = _interopRequireDefault(_filereader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
	_checkFileSize: function _checkFileSize(file, defaultOption, nextStep) {
		function checkMaxSize(size) {
			if (size > defaultOption.maxSize) {
				if (defaultOption.maxSize < 1024) defaultOption.onFail('上传文件必须少于' + defaultOption.maxSize + 'Byte');else if (defaultOption.maxSize < 1024 * 1024) defaultOption.onFail('上传文件必须少于' + defaultOption.maxSize / 1024 + 'KB');else defaultOption.onFail('上传文件必须少于' + defaultOption.maxSize / 1024 / 1024 + 'MB');
			} else {
				nextStep();
			}
		}
		if (file.files) {
			//支持HTML5的浏览器
			if (file.files[0].size) checkMaxSize(file.files[0].size);else checkMaxSize(file.files[0].fileSize);
		} else {
			if (defaultOption._fileName.match(/.jpg|.jpeg|.gif|.png|.bmp/i)) {
				//如果是图像文件
				var imgObj = new Image();
				imgObj.onerror = function () {
					defaultOption.onFail('图像格式不正确');
				};
				//1s内仍然没有读取到图像大小则直接到下一步
				var intervalCount = 0;
				var interval = setInterval(function () {
					intervalCount++;
					if (imgObj.fileSize > 0) {
						checkMaxSize(imgObj.fileSize);
						clearInterval(interval);
					} else if (intervalCount == 10) {
						clearInterval(interval);
						nextStep();
					}
				}, 100);
				imgObj.src = defaultOption._fileAddress;
			} else {
				//如果不是图像文件，就放过它吧，旧式浏览器无法对非图像文件获取文件大小
				nextStep();
			}
		}
	},
	_checkCanUpload: function _checkCanUpload(file, defaultOption, nextStep) {
		if (_env2.default.isInAndroid()) {
			var MQQBrowser = navigator.userAgent.match(/MQQBrowser\/([^\s]+)/);
			if (!MQQBrowser || MQQBrowser && MQQBrowser[1] < '5.2') {
				if (_env2.default.isInAndroid() <= '2.1') {
					defaultOption.onFail('您的安卓手机系统暂不支持上传功能，请下载最新版的QQ浏览器');
					return;
				}
			}
		} else if (_env2.default.isInIos() && _env2.default.isInIos() < '6.0') {
			defaultOption.onFail('您的手机系统不支持传图，请升级到ios6.0以上');
			return;
		}
		if (_env2.default.isInWeixin() && _env2.default.isInWeixin() < '5.2') {
			defaultOption.onFail('您当前的微信版本太低，不支持传图，请升级到最新版');
			return;
		}
		nextStep();
	},
	_checkFileSelect: function _checkFileSelect(file, defaultOption, nextStep) {
		if (file.files) {
			//支持HTML5的浏览器
			if (file.files.length == 0) return;
			defaultOption._fileName = file.files[0].name;
			var a = window.URL || window.webkitURL || false;
			if (a) {
				defaultOption._fileAddress = a.createObjectURL(file.files[0]);
			} else {
				defaultOption._fileAddress = file.value;
			}
		} else {
			//不支持HTML5的浏览器
			if (!file.value || file.value == null) return;
			defaultOption._fileName = file.value;
			//file.select();
			defaultOption._fileAddress = file.value;
		}
		nextStep();
	},
	_checkFileType: function _checkFileType(file, defaultOption, nextStep) {
		//测试后缀来检查文件类型
		if (defaultOption.type && defaultOption.type != null) {
			var isAllow = false;
			var allowTypes = defaultOption.type.split('|');
			for (var i in allowTypes) {
				var allowType = allowTypes[i].trim();
				if (allowType == "") continue;
				var allowType = '.' + allowType;
				if (defaultOption._fileName.substring(defaultOption._fileName.length - allowType.length).toLowerCase() == allowType.toLowerCase()) {
					isAllow = true;
					break;
				}
			}
			if (!isAllow) {
				defaultOption.onFail('仅支持上传以下格式的文件：' + defaultOption.type);
				return;
			}
		}
		nextStep();
	},
	_readImage: function _readImage(file, defaultOption, nextStep) {
		_filereader2.default.open({
			file: file.files[0],
			mode: 'binary',
			onSuccess: function onSuccess(data) {
				defaultOption._fieldata = data;
				nextStep();
				return;
			},
			onFail: function onFail(msg) {
				defaultOption.onFail(msg);
				return;
			}
		});
	},
	_compressImage: function _compressImage(file, defaultOption, nextStep) {
		//配置压缩图片的选项
		var conf = {
			quality: defaultOption.quality,
			scale: 0,
			orien: 1
		};
		if (defaultOption.width && defaultOption.width != null) conf.maxW = defaultOption.width;
		if (defaultOption.height && defaultOption.height != null) conf.maxH = defaultOption.height;
		if (conf.maxW && conf.maxH) conf.scale = conf.maxW / conf.maxH;
		if (file.files[0].type == 'image/jpeg') {
			try {
				var jpg = new _jpegMeta2.default.JpegFile(defaultOption._fieldata, defaultOption._fileName);
			} catch (e) {
				console.warn('读取jpeg的meta数据失败' + e);
			}
			if (jpg && jpg.tiff && jpg.tiff.Orientation) {
				conf = Object.assign(conf, {
					orien: jpg.tiff.Orientation.value
				});
			}
		}
		//读取并压缩图片
		var img = new Image();
		img.onload = function () {
			if (file.files[0].type == 'image/jpeg') {
				//预览用的perviewBase64
				var perviewBase64;
				try {
					perviewBase64 = _imageCompresser2.default.getImageBase64(this, { maxW: 320, quality: 0.8, orien: conf.orien });
				} catch (e) {
					defaultOption.onFail('压缩图片失败 ' + e);
					return false;
				}
				if (perviewBase64.indexOf('data:image') < 0) {
					defaultOption.onFail('上传照片格式不支持');
					return false;
				}
				//上传的uploadBase64
				var uploadBase64;
				try {
					uploadBase64 = _imageCompresser2.default.getImageBase64(this, conf);
				} catch (e) {
					defaultOption.onFail('压缩图片失败 ' + e);
					return false;
				}
				if (uploadBase64.indexOf('data:image') < 0) {
					defaultOption.onFail('上传照片格式不支持');
					return false;
				}
				defaultOption.onOpen(perviewBase64);
				defaultOption._uploadData = uploadBase64.split(';base64,')[1];
			} else {
				var uploadBase64 = _base2.default.encode(defaultOption._fieldata, false);
				defaultOption.onOpen('data:' + file.files[0].type + ';base64,' + uploadBase64);
				defaultOption._uploadData = uploadBase64;
			}
			nextStep();
		};
		img.onerror = function () {
			defaultOption.onFail('读取图片数据失败');
			return false;
		};
		img.src = defaultOption._fileAddress; //imageCompresser.getFileObjectURL(file);
	},
	_startUploadProgres: function _startUploadProgres(file, defaultOption, nextStep) {
		//制作虚假的进度条，1000毫秒自动往上增加5%
		defaultOption._progress = 1;
		defaultOption._progressInterval = 0;
		defaultOption.onProgress(defaultOption._progress);
		defaultOption._progressInterval = setInterval(function () {
			if (defaultOption._progress + 5 >= 100) {
				clearInterval(defaultOption._progressInterval);
				defaultOption._progressInterval = null;
				return;
			}
			defaultOption._progress += 5;
			defaultOption.onProgress(defaultOption._progress);
		}, 1000);
		nextStep();
	},
	_cloudImageUpload: function _cloudImageUpload(file, defaultOption) {
		var data = defaultOption._uploadData;
		var progress = function progress(e) {
			if (e.lengthComputable) {
				defaultOption._progress = Math.ceil(100 * (e.loaded / e.total));
				defaultOption.onProgress(defaultOption._progress);
			}
		};
		var complete = function complete(e) {
			var response = JSON.parse(e.target.response);
			if (_.isUndefined(response.error) == false) {
				defaultOption.onFail(response.error);
				return;
			}
			var result = {
				code: 0,
				msg: '',
				data: 'http://' + defaultOption.url + '/' + response.key
			};
			defaultOption.onSuccess(JSON.stringify(result));
		};
		var failed = function failed() {
			defaultOption.onFail('网络断开，请稍后重新操作');
		};
		var abort = function abort() {
			defaultOption.onFail('上传已取消');
		};
		var httpReuqest = new XMLHttpRequest();
		if (httpReuqest.upload) {
			httpReuqest.upload.addEventListener('progress', progress, false);
		}
		httpReuqest.open("POST", "http://upload.qiniu.com/putb64/-1", true);
		httpReuqest.addEventListener('progress', progress, false);
		httpReuqest.addEventListener("load", complete, false);
		httpReuqest.addEventListener("abort", abort, false);
		httpReuqest.addEventListener("error", failed, false);
		httpReuqest.setRequestHeader("Authorization", "UpToken " + defaultOption.urlToken);
		httpReuqest.setRequestHeader("Content-Type", "application/octet-stream");
		httpReuqest.send(data);
	},
	_localImageUpload: function _localImageUpload(file, defaultOption) {
		//构造数据
		var formData = new FormData();
		formData.append('data', defaultOption._uploadData);
		//提交表单
		var progress = function progress(e) {
			if (e.lengthComputable) {
				defaultOption._progress = Math.ceil(100 * (e.loaded / e.total));
				defaultOption.onProgress(defaultOption._progress);
			}
		};
		var complete = function complete(e) {
			defaultOption.onSuccess(e.target.response);
		};
		var failed = function failed() {
			defaultOption.onFail('网络断开，请稍后重新操作');
		};
		var abort = function abort() {
			defaultOption.onFail('上传已取消');
		};
		var httpReuqest = new XMLHttpRequest();
		if (httpReuqest.upload) {
			httpReuqest.upload.addEventListener('progress', progress, false);
		}
		httpReuqest.open("POST", defaultOption.url + '?t=' + Date.now(), true);
		httpReuqest.addEventListener('progress', progress, false);
		httpReuqest.addEventListener("load", complete, false);
		httpReuqest.addEventListener("abort", abort, false);
		httpReuqest.addEventListener("error", failed, false);
		httpReuqest.send(formData);
	},
	_uploadImage: function _uploadImage(file, defaultOption) {
		var self = this;
		if (defaultOption.urlType == 'local') self._localImageUpload(file, defaultOption);else self._cloudImageUpload(file, defaultOption);
	},
	_iframeUpload: function _iframeUpload(frameId, formId, defaultOption) {
		//制作虚假的进度条，1000毫秒自动往上增加5%
		defaultOption._progress = 1;
		defaultOption._progressInterval = 0;
		defaultOption.onProgress(defaultOption._progress);
		defaultOption._progressInterval = setInterval(function () {
			if (defaultOption._progress + 5 >= 100) {
				clearInterval(defaultOption._progressInterval);
				defaultOption._progressInterval = null;
				return;
			}
			defaultOption._progress += 5;
			defaultOption.onProgress(defaultOption._progress);
		}, 1000);
		//提交表单
		document.getElementById(formId).submit();
	},
	file: function file(option) {
		var self = this;
		//初始化option
		var defaultOption = {
			url: '',
			target: '',
			field: '',
			type: null,
			maxSize: null,
			accept: null,
			iframe: null
		};
		defaultOption = Object.assign(defaultOption, option);
		//绘制图形
		var formId = (0, _unique2.default)();
		var frameId = (0, _unique2.default)();
		var fileId = (0, _unique2.default)();
		if (defaultOption.accept) defaultOption.accept = 'accept="' + defaultOption.accept + '"';
		if (!window.FormData || !window.File) defaultOption.iframe = '<iframe name="' + frameId + '" id="' + frameId + '" style="display:none">';
		var tempDiv = '<form id="' + formId + '" action="' + defaultOption.url + '" target="' + frameId + '" method="post" enctype="multipart/form-data" style="opacity:0;filter:alpha(opacity=0);display:block;position:absolute;top:0px;bottom:0px;left:0px;right:0px;width:100%;height:100%;z-index:9;overflow:hidden;">' + '<input type="file" id="' + fileId + '" style="width:100%;height:100%;font-size:1000px;" name="' + defaultOption.field + '"' + defaultOption.accept + '/>' + defaultOption.iframe + '</form>';
		var div = document.createElement('div');
		div.innerHTML = tempDiv;
		div = div.firstChild;
		document.getElementById(defaultOption.target).style.position = "relative";
		document.getElementById(defaultOption.target).appendChild(div);

		//挂载iframe载入事件
		if (defaultOption.iframe) {
			document.getElementById(defaultOption.target).addEventListener("load", function () {
				//iframe载入事件会触发两次，一次是空白页面，第二次是提交文件后的页面
				//检查progress是否存在就能区分这两种事件了。
				if (!defaultOption._progress) return;
				var result;
				if (this.contentWindow) {
					result = this.contentWindow.document.body.textContent;
				} else {
					result = this.contentDocument.document.body.textContent;
				}
				clearInterval(defaultOption._progressInterval);
				defaultOption.onProgress(100);
				defaultOption.onSuccess(result);
			});
		}
		//挂载上传事件操作
		div.querySelectorAll('input').addEventListener('change', function () {
			var file = this;
			self._checkCanUpload(file, defaultOption, function () {
				self._checkFileSelect(file, defaultOption, function () {
					self._checkFileType(file, defaultOption, function () {
						self._checkFileSize(file, defaultOption, function () {
							if (defaultOption.iframe) {
								self._iframeUpload(frameId, formId, defaultOption);
							} else {
								defaultOption._uploadData = file.files[0];
								self._localImageUpload(file, defaultOption);
							}
						});
					});
				});
			});
		});
	},
	_cordovaImage: function _cordovaImage(defaultOption) {
		function chooseImage(next) {
			window.imagePicker.getPictures(function (results) {
				if (results.length == 0) {
					defaultOption.onFail('请选择图片上传噢');
					return;
				}
				next(results[0]);
			}, function (error) {
				defaultOption.onFail(error);
			}, {
				maximumImagesCount: 1,
				width: defaultOption.width
			});
		}
		function uploadImageToServer(fileURL) {
			var success = function success(r) {
				if (r.responseCode != 200) {
					defaultOption.onFail('上传图片到服务器失败，错误码为：' + r.responseCode);
					return;
				}
				defaultOption.onSuccess(r.response);
			};

			var fail = function fail(error) {
				defaultOption.onFail('上传图片到服务器失败 ' + error.code);
			};

			var options = new window.FileUploadOptions();
			options.fileKey = "data";
			options.fileName = fileURL.substr(fileURL.lastIndexOf('/') + 1);
			options.mimeType = "text/plain";

			var fileTransfer = new window.FileTransfer();
			fileTransfer.onprogress = function (progressEvent) {
				if (progressEvent.lengthComputable) {
					var precent = Math.ceil(100 * (progressEvent.loaded / progressEvent.total));
					defaultOption.onProgress(precent);
				}
			};
			fileTransfer.upload(fileURL, encodeURI(defaultOption.url), success, fail, options);
		}
		function go() {
			defaultOption.onOpen();
			chooseImage(function (url) {
				uploadImageToServer(url);
			});
		}
		document.getElementById(defaultOption.target).addEventListener("click", go);
	},
	_wxImage: function _wxImage(defaultOption) {
		var currentLocalId = null;
		var currentServerId = null;
		function chooseImage(next) {
			window.wx.chooseImage({
				count: 1,
				sizeType: ['original', 'compressed'],
				sourceType: ['album', 'camera'],
				success: function success(res) {
					var localIds = res.localIds;
					if (localIds.length == 0) return;
					currentLocalId = localIds[0];
					defaultOption.onOpen(currentLocalId);
					defaultOption.onProgress(0);
					next();
				}
			});
		}
		function uploadImageToWeixin(next) {
			window.wx.uploadImage({
				localId: currentLocalId,
				isShowProgressTips: 1,
				success: function success(res) {
					currentServerId = res.serverId;
					next();
				},
				fail: function fail() {
					defaultOption.onFail('上传图片到微信服务器失败');
				}
			});
		}
		function uploadImageToServer(next) {
			//构造数据
			var formData = new FormData();
			formData.append('data', currentServerId);
			//提交表单
			var progress = function progress(e) {
				if (e.lengthComputable) {
					var progress = Math.ceil(100 * (e.loaded / e.total));
					defaultOption.onProgress(progress);
				}
			};
			var complete = function complete(e) {
				defaultOption.onSuccess(e.target.response);
			};
			var failed = function failed() {
				defaultOption.onFail('下载微信图片断开，请稍后重新操作');
			};
			var abort = function abort() {
				defaultOption.onFail('上传已取消');
			};
			var httpReuqest = new XMLHttpRequest();
			if (httpReuqest.upload) {
				httpReuqest.upload.addEventListener('progress', progress, false);
			}
			httpReuqest.open("POST", defaultOption.url + '?t=' + Date.now(), true);
			httpReuqest.addEventListener('progress', progress, false);
			httpReuqest.addEventListener("load", complete, false);
			httpReuqest.addEventListener("abort", abort, false);
			httpReuqest.addEventListener("error", failed, false);
			httpReuqest.send(formData);
		}
		function go() {
			if (_env2.default.isInWeixin() < '6.1') {
				alert('您的微信版本过低，微信上传图功能将不能正常使用，请升级微信至6.1及以上');
				return;
			}
			chooseImage(function () {
				uploadImageToWeixin(function () {
					uploadImageToServer();
				});
			});
		}
		document.getElementById(defaultOption.target).addEventListener("click", go);
	},
	_crossImage: function _crossImage(defaultOption) {
		var currentImage = null;
		function chooseImage(next) {
			(0, _ajax2.default)({
				url: '/crossapi/image/choose',
				data: {
					isShowCamera: true,
					count: 1
				},
				success: function success(data) {
					data = JSON.parse(data);
					if (data.code != 0) {
						alert(data.msg);
						return;
					}
					if (data.data.length == 0) {
						return;
					}
					defaultOption.onOpen();
					defaultOption.onProgress(0);
					currentImage = data.data[0];
					next();
				},
				error: function error(xhr, data) {
					alert(data);
				}
			});
		}
		function uploadImage(next) {
			(0, _ajax2.default)({
				url: '/crossapi/image/upload',
				data: {
					url: defaultOption.url,
					image: currentImage,
					field: 'data',
					maxWidth: defaultOption.width,
					maxHeight: defaultOption.height
				},
				success: function success(data) {
					data = JSON.parse(data);
					if (data.code != 0) {
						defaultOption.onFail(data.msg);
						return;
					}
					defaultOption.onProgress(100);
					defaultOption.onSuccess(data.data);
				},
				error: function error(xhr, data) {
					defaultOption.onFail(data);
				}
			});
		}
		function go() {
			chooseImage(function () {
				uploadImage();
			});
		}
		document.getElementById(defaultOption.target).addEventListener("click", go);
	},
	imageV3: function imageV3(option) {
		//初始化option
		var defaultOption = {
			url: '',
			field: '',
			target: '',
			width: null,
			height: null,
			quality: 0.8,
			onOpen: function onOpen(data) {},
			onProgress: function onProgress(data) {},
			onSuccess: function onSuccess() {},
			onFail: function onFail(msg) {}
		};
		defaultOption = Object.assign(defaultOption, option);
		//处理
		if (_env2.default.isInWeixin()) {
			return this._wxImage(defaultOption);
		} else if (_env2.default.isInCrossApi()) {
			return this._crossImage(defaultOption);
		} else if (_env2.default.isInCrossWalk()) {
			defaultOption.type = 'png|jpg|jpeg|gif|bmp';
			defaultOption.accept = 'image/*';
			defaultOption.maxSize = 1024 * 1024 * 8;
			return this.file(defaultOption);
		} else {
			return this.image(defaultOption);
		}
	},
	imageV2: function imageV2(option) {
		//初始化option
		var self = this;
		var defaultOption = {
			url: '',
			urlToken: '',
			urlType: 'local',
			field: '',
			width: null,
			height: null,
			quality: 0.8,
			onOpen: function onOpen(data) {},
			onProgress: function onProgress(data) {},
			onSuccess: function onSuccess() {},
			onFail: function onFail(msg) {}
		};
		defaultOption = Object.assign(defaultOption, option);
		defaultOption.type = 'png|jpg|jpeg|gif|bmp';
		defaultOption.id = _.uniqueId('upload_');
		defaultOption.onUpload = function (file) {
			self._checkCanUpload(file, defaultOption, function () {
				self._checkFileSelect(file, defaultOption, function () {
					self._checkFileType(file, defaultOption, function () {
						self._readImage(file, defaultOption, function () {
							self._compressImage(file, defaultOption, function () {
								self._startUploadProgres(file, defaultOption, function () {
									self._uploadImage(file, defaultOption);
								});
							});
						});
					});
				});
			});
		};
		//绘制图形
		var el = '<input id="' + defaultOption.id + '" type="file" name="' + defaultOption.field + '" style="opacity:0;display:block;position:absolute;top:0px;bottom:0px;left:0px;right:0px;width:100%;height:100%;" accept="image/*" onchange="' + func.invoke(defaultOption.onUpload) + '">';
		return {
			el: el
		};
	},
	image: function image(option) {
		var self = this;
		var isHtml5Support;
		if (window.File && window.FileList && window.FileReader && window.Blob) isHtml5Support = true;else isHtml5Support = false;
		if (isHtml5Support == false) {
			//不支持HTML5的浏览器则直接使用普通上传模式，不会在客户端进行压缩图片后再上传
			option.type = 'png|jpg|jpeg|gif|bmp';
			option.accept = 'image/*';
			return self.file(option);
		}
		//初始化option
		var defaultOption = {
			url: '',
			urlToken: '',
			urlType: 'local',
			target: '',
			field: '',
			width: null,
			height: null,
			quality: 0.8,
			onOpen: function onOpen(data) {},
			onProgress: function onProgress(data) {},
			onSuccess: function onSuccess() {},
			onFail: function onFail(msg) {}
		};
		defaultOption = Object.assign(defaultOption, option);
		defaultOption.type = 'png|jpg|jpeg|gif|bmp';
		//绘制图形
		var div = "";
		var fileId = (0, _unique2.default)();
		if (defaultOption.accept) defaultOption.type = 'accept="image/*"';
		var tempDiv = '<input id="' + fileId + '" type="file" name="' + defaultOption.field + '" style="opacity:0;display:block;position:absolute;top:0px;bottom:0px;left:0px;right:0px;width:100%;height:100%;" accept="image/*">';
		var div = document.createElement('div');
		div.innerHTML = tempDiv;
		div = div.firstChild;
		var target = document.getElementById(defaultOption.target);
		target.style.overflow = 'hidden';
		target.style.position = 'relative';
		target.appendChild(div);
		//挂载上传事件操作
		div.addEventListener('change', function () {
			var file = this;
			self._checkCanUpload(file, defaultOption, function () {
				self._checkFileSelect(file, defaultOption, function () {
					self._checkFileType(file, defaultOption, function () {
						self._readImage(file, defaultOption, function () {
							self._compressImage(file, defaultOption, function () {
								self._uploadImage(file, defaultOption);
							});
						});
					});
				});
			});
		});
	}
};