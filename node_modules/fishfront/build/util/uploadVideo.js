'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _env = require('../runtime/env');

var _env2 = _interopRequireDefault(_env);

var _unique = require('./unique');

var _unique2 = _interopRequireDefault(_unique);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
	_checkCanUpload: function _checkCanUpload(file, defaultOption, nextStep) {
		// if ( runtime.isInAndroid() ) {
		// 	var MQQBrowser = navigator.userAgent.match(/MQQBrowser\/([^\s]+)/);
		// 	if (!MQQBrowser || MQQBrowser && MQQBrowser[1] < '5.2') {
		// 		if ( runtime.isInAndroid() <= '2.1') {
		// 			defaultOption.onFail('您的安卓手机系统暂不支持上传功能，请下载最新版的QQ浏览器');
		// 			return;
		// 		}
		// 	}
		// } else if (runtime.isInIos() && runtime.isInIos() < '6.0') {
		// 	defaultOption.onFail('您的手机系统不支持传图，请升级到ios6.0以上');
		// 	return;
		// }
		// if (runtime.isInWeixin() && runtime.isInWeixin() < '5.2') {
		// 	defaultOption.onFail('您当前的微信版本太低，不支持传图，请升级到最新版');
		// 	return;
		// }
		nextStep();
	},
	_uploadVideoFun: function _uploadVideoFun(file, defaultOption) {
		var self = this;
		function _uploadVideo() {
			self._uploadVideo(file, defaultOption);
		}
		function _checkFileType() {
			self._checkFileType(file, defaultOption, function (ok) {
				if (ok) {
					_uploadVideo();
				}
			});
		}
		function _checkFileSelect() {
			self._checkFileSelect(file, defaultOption, function (ok) {
				if (ok) {
					_checkFileType();
				}
			});
		}
		_checkFileSelect();
	},
	_checkFileSelect: function _checkFileSelect(file, defaultOption, nextStep) {
		if (file.files) {
			//支持HTML5的浏览器
			if (file.files.length == 0) {
				defaultOption.onFail('请选择视频上传噢');
				nextStep(false);
				return;
			}

			defaultOption._fileName = file.files[0].name;
		} else {
			//不支持HTML5的浏览器
			if (!file.value || file.value == null) {
				defaultOption.onFail('该浏览器不支持HTML5，请升级浏览器');
				nextStep(false);
				return;
			}
			defaultOption._fileName = file.value;
		}
		nextStep(true);
	},
	_checkFileType: function _checkFileType(file, defaultOption, nextStep) {
		//测试后缀来检查文件类型
		if (defaultOption.type && defaultOption.type != null) {
			var isAllow = false;
			var allowTypes = defaultOption.type.split('|');
			for (var i in allowTypes) {
				var allowType = allowTypes[i].trim();
				if (allowType == "") continue;
				var allowType = '.' + allowType;
				if (defaultOption._fileName.substring(defaultOption._fileName.length - allowType.length).toLowerCase() == allowType.toLowerCase()) {
					isAllow = true;
					break;
				}
			}
			if (!isAllow) {
				defaultOption.onFail('仅支持上传以下格式的文件：' + defaultOption.type);
				nextStep(false);
				return;
			}
		}
		nextStep(true);
	},
	_uploadVideo: function _uploadVideo(file, defaultOption) {
		var self = this;
		if (defaultOption.urlType == 'local') {
			self._localVideoUpload(file, defaultOption);
		} else {
			self._cloudVideoUpload(file, defaultOption);
		}
	},
	_cloudVideoUpload: function _cloudVideoUpload(file, defaultOption) {
		var data = file.files[0];
		var progress = function progress(e) {
			if (e.lengthComputable) {
				defaultOption._progress = Math.ceil(100 * (e.loaded / e.total));
				defaultOption.onProgress(defaultOption._progress);
			}
		};
		var complete = function complete(e) {
			var response = JSON.parse(e.target.response);
			if (_.isUndefined(response.error) == false) {
				defaultOption.onFail(response.error);
				return;
			}
			var result = {
				code: 0,
				msg: '',
				data: 'http://' + defaultOption.url + '/' + response.key
			};
			defaultOption.onSuccess(JSON.stringify(result));
		};
		var failed = function failed() {
			defaultOption.onFail('网络断开，请稍后重新操作');
		};
		var abort = function abort() {
			defaultOption.onFail('上传已取消');
		};
		var httpReuqest = new XMLHttpRequest();
		if (httpReuqest.upload) {
			httpReuqest.upload.addEventListener('progress', progress, false);
		}
		httpReuqest.open("POST", "http://upload.qiniu.com/putb64/-1", true);
		httpReuqest.addEventListener('progress', progress, false);
		httpReuqest.addEventListener("load", complete, false);
		httpReuqest.addEventListener("abort", abort, false);
		httpReuqest.addEventListener("error", failed, false);
		httpReuqest.setRequestHeader("Authorization", "UpToken " + defaultOption.urlToken);
		httpReuqest.setRequestHeader("Content-Type", "application/octet-stream");
		httpReuqest.send(data);
	},
	_localVideoUpload: function _localVideoUpload(file, defaultOption) {
		//构造数据
		var formData = new FormData();
		formData.append('data', file.files[0]);
		//提交表单
		var progress = function progress(e) {
			if (e.lengthComputable) {
				defaultOption._progress = Math.ceil(100 * (e.loaded / e.total));
				defaultOption.onProgress(defaultOption._progress);
			}
		};
		var complete = function complete(e) {
			defaultOption.onSuccess(e.target.response);
		};
		var failed = function failed() {
			defaultOption.onFail('网络断开，请稍后重新操作');
		};
		var abort = function abort() {
			defaultOption.onFail('上传已取消');
		};
		var httpReuqest = new XMLHttpRequest();
		if (httpReuqest.upload) {
			httpReuqest.upload.addEventListener('progress', progress, false);
		}
		httpReuqest.open("POST", defaultOption.url + '?t=' + Date.now(), true);
		httpReuqest.addEventListener('progress', progress, false);
		httpReuqest.addEventListener("load", complete, false);
		httpReuqest.addEventListener("abort", abort, false);
		httpReuqest.addEventListener("error", failed, false);
		httpReuqest.send(formData);
	},
	_video: function _video(option) {
		var self = this;
		var isHtml5Support;
		if (window.File && window.FileList && window.FileReader && window.Blob) isHtml5Support = true;else isHtml5Support = false;
		if (isHtml5Support == false) {
			//不支持HTML5的浏览器则直接使用普通上传模式，不会在客户端进行压缩图片后再上传
			option.type = 'mp4|avi|mpeg|rmvb|mpeg4|mov';
			option.accept = 'video/*';
			return self.file(option);
		}
		//初始化option
		var defaultOption = {
			url: '',
			urlToken: '',
			urlType: 'local',
			target: '',
			field: '',
			quality: 0.8,
			onOpen: function onOpen(data) {},
			onSuccess: function onSuccess() {},
			onProgress: function onProgress(data) {},
			onFail: function onFail(msg) {}
		};
		defaultOption = Object.assign(defaultOption, option);
		defaultOption.type = 'mp4|avi|mpeg|rmvb|mpeg4|mov';
		//绘制图形
		var div = "";
		var fileId = (0, _unique2.default)();
		if (defaultOption.accept) defaultOption.type = 'accept="video/*"';

		var tempDiv = '<input id="' + fileId + '" type="file" name="' + defaultOption.field + '" style="opacity:0;display:block;position:absolute;top:0px;bottom:0px;left:0px;right:0px;width:100%;height:100%;" accept="video/*">';

		var div = document.createElement('div');
		div.innerHTML = tempDiv;
		div = div.firstChild;
		var target = document.getElementById(defaultOption.target);
		target.style.overflow = 'hidden';
		target.style.position = 'relative';
		target.appendChild(div);
		//挂载上传事件操作
		div.addEventListener('change', function () {
			var file = this;
			var length = file.files.length;
			self._checkCanUpload(file, defaultOption, function () {
				self._uploadVideoFun(file, defaultOption);
			});
		});
	},
	video: function video(option) {
		//初始化option
		var defaultOption = {
			url: '',
			field: '',
			target: '',
			quality: 0.8,
			onOpen: function onOpen(data) {},
			onSuccess: function onSuccess() {},
			onProgress: function onProgress(data) {},
			onFail: function onFail(msg) {}
		};
		defaultOption = Object.assign(defaultOption, option);
		//处理
		return this._video(defaultOption);
	}
};