'use strict';

var _underscore = require('underscore');

var _underscore2 = _interopRequireDefault(_underscore);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function delOutput(context, output) {
	var filename = context + "/" + output;
	if (_fs2.default.existsSync(filename)) {
		var fileInfo = _fs2.default.lstatSync(filename);
		if (fileInfo.isDirectory()) {
			var filenames = _fs2.default.readdirSync(filename);
			for (var i = 0; i != filenames.length; ++i) {
				delOutput(filename, filenames[i]);
			}
			_fs2.default.rmdirSync(filename);
		} else {
			_fs2.default.unlinkSync(filename);
		}
	}
}

function getAllEntryFile(context, entry) {
	var filenames = _fs2.default.readdirSync(context + "/" + entry);
	var result = {};
	for (var i = 0; i != filenames.length; ++i) {
		var singleFileName = filenames[i];
		if (singleFileName == ".") {
			continue;
		} else if (singleFileName == "..") {
			continue;
		}
		var fileInfo = _fs2.default.lstatSync(context + "/" + entry + "/" + singleFileName);
		if (fileInfo.isFile()) {
			if (singleFileName.endsWith(".js") == false) {
				continue;
			}
			singleFileName = singleFileName.substr(0, singleFileName.length - 3);
			result[singleFileName] = "";
		} else if (fileInfo.isDirectory()) {
			result[singleFileName] = getAllEntryFile(context + "/" + entry, singleFileName);
		}
	}
	return result;
}

function getAllEntryFileHtmlInner(context, entryFiles, template) {
	var result = {};
	for (var i in entryFiles) {
		var singleEntryName = i;
		var singleEntryFile = entryFiles[i];
		if (typeof singleEntryFile == "string") {
			var singleResult = template({ name: singleEntryName });
		} else {
			var singleResult = getAllEntryFileHtmlInner(context, singleEntryFile, template);
		}
		result[singleEntryName] = singleResult;
	}
	return result;
}
function getAllEntryFileHtml(context, entryFiles, template) {
	var templateFile = _fs2.default.readFileSync(context + "/" + template).toString();
	var template = _underscore2.default.template(templateFile);
	return getAllEntryFileHtmlInner(context, entryFiles, template);
}

function createOutputInner(context, entryFilesAndHtml) {
	for (var i in entryFilesAndHtml) {
		var singleEntryFileName = i;
		var singleEntryFileHtml = entryFilesAndHtml[i];
		if (typeof singleEntryFileHtml == "string") {
			_fs2.default.writeFileSync(context + "/" + singleEntryFileName + ".html", singleEntryFileHtml);
		} else {
			_fs2.default.mkdirSync(context + "/" + singleEntryFileName);
			createOutputInner(context + "/" + singleEntryFileName, singleEntryFileHtml);
		}
	}
}

function createOutput(context, output, entryFilesAndHtml) {
	_fs2.default.mkdirSync(context + "/" + output);
	createOutputInner(context + "/" + output, entryFilesAndHtml);
}

function getWebpackEntry(entry, output, entryFiles) {
	var result = {};
	for (var i in entryFiles) {
		var singleEntryName = i;
		var singleEntryFile = entryFiles[i];
		if (typeof singleEntryFile == "string") {
			var singleResult = {};
			singleResult[output + "/" + singleEntryName] = "./" + entry + "/" + singleEntryName;
		} else {
			var singleResult = getWebpackEntry(entry + "/" + singleEntryName, output + "/" + singleEntryName, singleEntryFile);
		}
		result = _underscore2.default.extend(result, singleResult);
	}
	return result;
}

function getWebpackOption(context, entry, output, entryFiles, option) {
	var webpackOption = option;
	webpackOption.context = context;
	webpackOption.entry = getWebpackEntry(entry, output, entryFiles);
	webpackOption.output = {
		publicPath: '/',
		filename: '[name].js'
	};
	return webpackOption;
}

function go(webpackOption) {
	var context = webpackOption.context;
	var output = webpackOption.output;
	var entry = webpackOption.entry;
	var template = webpackOption.template;
	var option = webpackOption.option;

	delOutput(context, output);
	var entryFiles = getAllEntryFile(context, entry);
	var entryFilesAndHtml = getAllEntryFileHtml(context, entryFiles, template);
	createOutput(context, output, entryFilesAndHtml);

	return getWebpackOption(context, entry, output, entryFiles, option);
}
module.exports = go;