'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
var is_unicode = true;
exports.default = {
	encode: function encode(input, is_unicode) {
		if (typeof is_unicode == 'undefined' || is_unicode == null) is_unicode = this.is_unicode;
		if (is_unicode) input = this._u2a(input);
		var output = '';
		var chr1,
		    chr2,
		    chr3 = '';
		var enc1,
		    enc2,
		    enc3,
		    enc4 = '';
		var i = 0;
		do {
			chr1 = input.charCodeAt(i++);
			chr2 = input.charCodeAt(i++);
			chr3 = input.charCodeAt(i++);
			enc1 = chr1 >> 2;
			enc2 = (chr1 & 3) << 4 | chr2 >> 4;
			enc3 = (chr2 & 15) << 2 | chr3 >> 6;
			enc4 = chr3 & 63;
			if (isNaN(chr2)) {
				enc3 = enc4 = 64;
			} else if (isNaN(chr3)) {
				enc4 = 64;
			}
			output = output + this._keys.charAt(enc1) + this._keys.charAt(enc2) + this._keys.charAt(enc3) + this._keys.charAt(enc4);
			chr1 = chr2 = chr3 = '';
			enc1 = enc2 = enc3 = enc4 = '';
		} while (i < input.length);
		return output;
	},

	decode: function decode(input, is_unicode) {
		if (typeof is_unicode == 'undefined' || is_unicode == null) is_unicode = this.is_unicode;
		var output = '';
		var chr1,
		    chr2,
		    chr3 = '';
		var enc1,
		    enc2,
		    enc3,
		    enc4 = '';
		var i = 0;
		if (input.length % 4 != 0) {
			return '';
		}
		var base64test = /[^A-Za-z0-9\+\/\=]/g;
		if (base64test.exec(input)) {
			return '';
		}
		do {
			enc1 = this._keys.indexOf(input.charAt(i++));
			enc2 = this._keys.indexOf(input.charAt(i++));
			enc3 = this._keys.indexOf(input.charAt(i++));
			enc4 = this._keys.indexOf(input.charAt(i++));
			chr1 = enc1 << 2 | enc2 >> 4;
			chr2 = (enc2 & 15) << 4 | enc3 >> 2;
			chr3 = (enc3 & 3) << 6 | enc4;
			output = output + String.fromCharCode(chr1);
			if (enc3 != 64) {
				output += String.fromCharCode(chr2);
			}
			if (enc4 != 64) {
				output += String.fromCharCode(chr3);
			}
			chr1 = chr2 = chr3 = '';
			enc1 = enc2 = enc3 = enc4 = '';
		} while (i < input.length);

		if (is_unicode) output = this._a2u(output);
		return output;
	},

	_keys: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',

	_u2a: function _u2a(asContents) {
		var len1 = asContents.length;
		var temp = '';
		for (var i = 0; i < len1; i++) {
			var varasc = asContents.charCodeAt(i);
			if (varasc < 0x80) {
				temp += String.fromCharCode(varasc);
			} else if (varasc < 0x800) {
				var chr1 = varasc & 0xff;
				var chr2 = varasc >> 8 & 0xff;
				temp += String.fromCharCode(0xC0 | chr2 << 2 | chr1 >> 6 & 0x3);
				temp += String.fromCharCode(0x80 | chr1 & 0x3F);
			} else {
				var chr1 = varasc & 0xff;
				var chr2 = varasc >> 8 & 0xff;
				temp += String.fromCharCode(0xE0 | chr2 >> 4);
				temp += String.fromCharCode(0x80 | chr2 << 2 & 0x3C | chr1 >> 6 & 0x3);
				temp += String.fromCharCode(0x80 | chr1 & 0x3F);
			}
		}
		return temp;
	},
	_a2u: function _a2u(utftext) {
		var string = "",
		    i = 0,
		    c = 0,
		    c1 = 0,
		    c2 = 0;

		while (i < utftext.length) {

			c = utftext.charCodeAt(i);

			if (c < 128) {

				string += String.fromCharCode(c);
				i++;
			} else if (c > 191 && c < 224) {

				c1 = utftext.charCodeAt(i + 1);
				string += String.fromCharCode((c & 31) << 6 | c1 & 63);
				i += 2;
			} else {

				c1 = utftext.charCodeAt(i + 1);
				c2 = utftext.charCodeAt(i + 2);
				string += String.fromCharCode((c & 15) << 12 | (c1 & 63) << 6 | c2 & 63);
				i += 3;
			}
		}

		return string;
	}
};