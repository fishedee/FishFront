'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _isomorphicFetch = require('isomorphic-fetch');

var _isomorphicFetch2 = _interopRequireDefault(_isomorphicFetch);

var _param = require('../encoding/param');

var _param2 = _interopRequireDefault(_param);

var _env = require('fishfront/runtime/env');

var _env2 = _interopRequireDefault(_env);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } step("next"); }); }; }

exports.default = {
	_fetchInner: (function () {
		var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(option) {
			var url, urlOption;
			return regeneratorRuntime.wrap(function _callee$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							url = option.url;

							if (url.indexOf('?') == -1) {
								url += "?";
							} else {
								url += "&";
							}
							url += "_t=" + new Date().valueOf();
							_context.next = 5;
							return this.makeToken(option.data);

						case 5:
							option.data = _context.sent;

							// console.log('BEFORE_ENCODE', option)
							urlOption = {};

							if (option.xhrFields && option.xhrFields.withCredentials) {
								urlOption['credentials'] = 'include';
							}
							if (option.headers) {
								urlOption.headers = option.headers;
							}
							if (!option.method || option.method == "get") {
								url += "&" + _param2.default.encode(option.data);
							} else {
								urlOption.method = 'post';
								urlOption.body = _param2.default.encode(option.data);
							}
							return _context.abrupt('return', (0, _isomorphicFetch2.default)(url, urlOption));

						case 11:
						case 'end':
							return _context.stop();
					}
				}
			}, _callee, this);
		}));

		return function _fetchInner(_x) {
			return ref.apply(this, arguments);
		};
	})(),
	ajax: function ajax(option) {
		function fireSuccess(success) {
			if (option.success) {
				option.success(success);
			}
		}
		function fireError(error) {
			if (option.error) {
				option.error(null, error);
			}
		}
		return this._fetchInner(option).then(function (response) {
			if (response.status != 200) {
				if (_env2.default.isInBrowser()) {
					throw new Error('错误码不是200，是' + response.status);
				} else {
					throw new Error('错误码不是200，是' + response.status + ";option:" + JSON.stringify(option) + ';' + JSON.stringify(response));
				}
			}
			return response.text();
		}).then(fireSuccess).catch(fireError);
	},
	get: function get(url, data, success, option) {
		option = option || {};
		return this.ajax(Object.assign({
			method: 'get',
			url: url,
			data: data,
			success: success
		}, option));
	},
	post: function post(url, data, success, option) {
		option = option || {};
		return this.ajax(Object.assign({
			method: 'post',
			url: url,
			data: data,
			success: success
		}, option));
	},
	fetch: (function () {
		var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(option) {
			var response, text;
			return regeneratorRuntime.wrap(function _callee2$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							_context2.next = 2;
							return this._fetchInner(option);

						case 2:
							response = _context2.sent;

							if (!(response.status != 200)) {
								_context2.next = 9;
								break;
							}

							if (!_env2.default.isInBrowser()) {
								_context2.next = 8;
								break;
							}

							throw new Error('错误码不是200，是' + response.status);

						case 8:
							throw new Error('错误码不是200，是' + response.status + ";option:" + JSON.stringify(option) + ';' + JSON.stringify(response));

						case 9:
							_context2.next = 11;
							return response.text();

						case 11:
							text = _context2.sent;
							return _context2.abrupt('return', text);

						case 13:
						case 'end':
							return _context2.stop();
					}
				}
			}, _callee2, this);
		}));

		return function fetch(_x2) {
			return ref.apply(this, arguments);
		};
	})(),
	fetchGet: (function () {
		var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(url, data, option) {
			return regeneratorRuntime.wrap(function _callee3$(_context3) {
				while (1) {
					switch (_context3.prev = _context3.next) {
						case 0:
							option = option || {};
							_context3.next = 3;
							return this.fetch(Object.assign({
								method: 'get',
								url: url,
								data: data
							}, option));

						case 3:
							return _context3.abrupt('return', _context3.sent);

						case 4:
						case 'end':
							return _context3.stop();
					}
				}
			}, _callee3, this);
		}));

		return function fetchGet(_x3, _x4, _x5) {
			return ref.apply(this, arguments);
		};
	})(),
	fetchPost: (function () {
		var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee4(url, data, option) {
			return regeneratorRuntime.wrap(function _callee4$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
							option = option || {};
							_context4.next = 3;
							return this.fetch(Object.assign({
								method: 'post',
								url: url,
								data: data
							}, option));

						case 3:
							return _context4.abrupt('return', _context4.sent);

						case 4:
						case 'end':
							return _context4.stop();
					}
				}
			}, _callee4, this);
		}));

		return function fetchPost(_x6, _x7, _x8) {
			return ref.apply(this, arguments);
		};
	})(),
	fetchJson: (function () {
		var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee5(option) {
			var text, json, dataString, parseError;
			return regeneratorRuntime.wrap(function _callee5$(_context5) {
				while (1) {
					switch (_context5.prev = _context5.next) {
						case 0:
							_context5.next = 2;
							return this.fetch(option);

						case 2:
							text = _context5.sent;
							_context5.prev = 3;
							json = JSON.parse(text);
							_context5.next = 18;
							break;

						case 7:
							_context5.prev = 7;
							_context5.t0 = _context5['catch'](3);

							if (!_env2.default.isInBrowser()) {
								_context5.next = 13;
								break;
							}

							throw new Error("服务器错误，返回的是非法的json格式数据");

						case 13:
							dataString = option.data;

							if (dataString instanceof Object) {
								dataString = JSON.stringify(dataString);
							}
							parseError = new Error('JSON解析错误:' + option.url + '|' + dataString + '|' + text);

							parseError.stack = _context5.t0.stack;
							throw parseError;

						case 18:
							return _context5.abrupt('return', json);

						case 19:
						case 'end':
							return _context5.stop();
					}
				}
			}, _callee5, this, [[3, 7]]);
		}));

		return function fetchJson(_x9) {
			return ref.apply(this, arguments);
		};
	})(),
	fetchGetJson: (function () {
		var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee6(url, data, option) {
			return regeneratorRuntime.wrap(function _callee6$(_context6) {
				while (1) {
					switch (_context6.prev = _context6.next) {
						case 0:
							option = option || {};
							_context6.next = 3;
							return this.fetchJson(Object.assign({
								method: 'get',
								url: url,
								data: data
							}, option));

						case 3:
							return _context6.abrupt('return', _context6.sent);

						case 4:
						case 'end':
							return _context6.stop();
					}
				}
			}, _callee6, this);
		}));

		return function fetchGetJson(_x10, _x11, _x12) {
			return ref.apply(this, arguments);
		};
	})(),
	fetchPostJson: (function () {
		var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee7(url, data, option) {
			return regeneratorRuntime.wrap(function _callee7$(_context7) {
				while (1) {
					switch (_context7.prev = _context7.next) {
						case 0:
							option = option || {};
							_context7.next = 3;
							return this.fetchJson(Object.assign({
								method: 'post',
								url: url,
								data: data
							}, option));

						case 3:
							return _context7.abrupt('return', _context7.sent);

						case 4:
						case 'end':
							return _context7.stop();
					}
				}
			}, _callee7, this);
		}));

		return function fetchPostJson(_x13, _x14, _x15) {
			return ref.apply(this, arguments);
		};
	})(),
	makeToken: (function () {
		var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee8(data) {
			var arr, sortArg, s, mima;
			return regeneratorRuntime.wrap(function _callee8$(_context8) {
				while (1) {
					switch (_context8.prev = _context8.next) {
						case 0:
							// console.log('data',data)
							if (data && data.csrfToken) {
								delete data.csrfToken;
							}
							// console.log(data)
							if (!data) {
								data = {};
							}

							data.timestamp = new Date().valueOf();
							arr = Object.keys(data);
							sortArg = [];

							arr.forEach(function (key) {
								// console.log(key)
								// console.log(data[key])
								// console.log("instanceof Array",data[key] instanceof Array)
								// console.log("instanceof Object",data[key] instanceof Object)
								// if (data[key] instanceof Object){
								// 	console.log("length",key,data[key].length)
								// }
								if (data[key] instanceof Array) {
									// console.log("length",key,data[key].length)
									if (data[key].length > 0) {
										data[key].sort();
										// console.log("data[key]",data[key])
										var arrayString = "[";
										var is0 = false;
										data[key].forEach(function (key2) {
											if (!is0) {
												is0 = true;
											} else {
												arrayString += " ";
											}
											if (key2 instanceof Object) {

												// console.log("instanceof Object",key2 instanceof Object)
												// console.log("key2:",key2)
												arrayString += "map[";
												var sortArg2 = [];
												for (var i in key2) {
													sortArg2.push(i + ":" + key2[i]);
												}
												sortArg2.sort();
												arrayString += sortArg2.join(" ");
												arrayString += "]";
											} else {
												arrayString += key2;
											}
										});
										arrayString += "]";
										sortArg.push(key + "=" + arrayString);
									}
								} else {
									if (data[key] != undefined && data[key] !== "") {
										// console.log("v:",key+"="+data[key])
										sortArg.push(key + "=" + data[key]);
									}
								}
							});

							sortArg.sort();
							s = sortArg.join("&");
							// console.log(s)

							_context8.next = 10;
							return hbbEncrypt.ready();

						case 10:
							mima = hbbEncrypt.AsciiToString(hbbEncrypt._encryption(hbbEncrypt.allocateUTF8(s)));
							// console.log(mima)

							data.csrfToken = mima;

							return _context8.abrupt('return', data);

						case 13:
						case 'end':
							return _context8.stop();
					}
				}
			}, _callee8, this);
		}));

		return function makeToken(_x16) {
			return ref.apply(this, arguments);
		};
	})()
};