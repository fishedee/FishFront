'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _isomorphicFetch = require('isomorphic-fetch');

var _isomorphicFetch2 = _interopRequireDefault(_isomorphicFetch);

var _param = require('../encoding/param');

var _param2 = _interopRequireDefault(_param);

var _env = require('fishfront/runtime/env');

var _env2 = _interopRequireDefault(_env);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } step("next"); }); }; }

exports.default = {
	_fetchInner: function _fetchInner(option) {
		var url = option.url;
		if (url.indexOf('?') == -1) {
			url += "?";
		} else {
			url += "&";
		}
		url += "_t=" + new Date().valueOf();
		var urlOption = {};
		if (option.xhrFields && option.xhrFields.withCredentials) {
			urlOption['credentials'] = 'include';
		}
		if (option.headers) {
			urlOption.headers = option.headers;
		}
		if (!option.method || option.method == "get") {
			url += "&" + _param2.default.encode(option.data);
		} else {
			urlOption.method = 'post';
			urlOption.body = _param2.default.encode(option.data);
		}
		return (0, _isomorphicFetch2.default)(url, urlOption);
	},
	ajax: function ajax(option) {
		function fireSuccess(success) {
			if (option.success) {
				option.success(success);
			}
		}
		function fireError(error) {
			if (option.error) {
				option.error(null, error);
			}
		}
		return this._fetchInner(option).then(function (response) {
			if (response.status != 200) {
				fireError('错误码不是200，是' + response.status);
			}
			return response.text();
		}).then(fireSuccess).catch(fireError);
	},
	get: function get(url, data, success, option) {
		option = option || {};
		return this.ajax(Object.assign({
			method: 'get',
			url: url,
			data: data,
			success: success
		}, option));
	},
	post: function post(url, data, success, option) {
		option = option || {};
		return this.ajax(Object.assign({
			method: 'post',
			url: url,
			data: data,
			success: success
		}, option));
	},
	fetch: (function () {
		var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(option) {
			var response, text;
			return regeneratorRuntime.wrap(function _callee$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							_context.next = 2;
							return this._fetchInner(option);

						case 2:
							response = _context.sent;

							if (!(response.status != 200)) {
								_context.next = 5;
								break;
							}

							throw new Error('错误码不是200，是' + response.status);

						case 5:
							_context.next = 7;
							return response.text();

						case 7:
							text = _context.sent;
							return _context.abrupt('return', text);

						case 9:
						case 'end':
							return _context.stop();
					}
				}
			}, _callee, this);
		}));

		return function fetch(_x) {
			return ref.apply(this, arguments);
		};
	})(),
	fetchGet: (function () {
		var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(url, data, option) {
			return regeneratorRuntime.wrap(function _callee2$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							option = option || {};
							_context2.next = 3;
							return this.fetch(Object.assign({
								method: 'get',
								url: url,
								data: data
							}, option));

						case 3:
							return _context2.abrupt('return', _context2.sent);

						case 4:
						case 'end':
							return _context2.stop();
					}
				}
			}, _callee2, this);
		}));

		return function fetchGet(_x2, _x3, _x4) {
			return ref.apply(this, arguments);
		};
	})(),
	fetchPost: (function () {
		var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(url, data, option) {
			return regeneratorRuntime.wrap(function _callee3$(_context3) {
				while (1) {
					switch (_context3.prev = _context3.next) {
						case 0:
							option = option || {};
							_context3.next = 3;
							return this.fetch(Object.assign({
								method: 'post',
								url: url,
								data: data
							}, option));

						case 3:
							return _context3.abrupt('return', _context3.sent);

						case 4:
						case 'end':
							return _context3.stop();
					}
				}
			}, _callee3, this);
		}));

		return function fetchPost(_x5, _x6, _x7) {
			return ref.apply(this, arguments);
		};
	})(),
	fetchJson: (function () {
		var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee4(option) {
			var text, json, dataString, parseError;
			return regeneratorRuntime.wrap(function _callee4$(_context4) {
				while (1) {
					switch (_context4.prev = _context4.next) {
						case 0:
							_context4.next = 2;
							return this.fetch(option);

						case 2:
							text = _context4.sent;
							_context4.prev = 3;
							json = JSON.parse(text);
							_context4.next = 18;
							break;

						case 7:
							_context4.prev = 7;
							_context4.t0 = _context4['catch'](3);

							if (!_env2.default.isInBrowser()) {
								_context4.next = 13;
								break;
							}

							throw new Error("服务器错误，返回的是非法的json格式数据");

						case 13:
							dataString = option.data;

							if (dataString instanceof Object) {
								dataString = JSON.stringify(dataString);
							}
							parseError = new Error('JSON解析错误:' + option.url + '|' + dataString + '|' + text);

							parseError.stack = _context4.t0.stack;
							throw parseError;

						case 18:
							return _context4.abrupt('return', json);

						case 19:
						case 'end':
							return _context4.stop();
					}
				}
			}, _callee4, this, [[3, 7]]);
		}));

		return function fetchJson(_x8) {
			return ref.apply(this, arguments);
		};
	})(),
	fetchGetJson: (function () {
		var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee5(url, data, option) {
			return regeneratorRuntime.wrap(function _callee5$(_context5) {
				while (1) {
					switch (_context5.prev = _context5.next) {
						case 0:
							option = option || {};
							_context5.next = 3;
							return this.fetchJson(Object.assign({
								method: 'get',
								url: url,
								data: data
							}, option));

						case 3:
							return _context5.abrupt('return', _context5.sent);

						case 4:
						case 'end':
							return _context5.stop();
					}
				}
			}, _callee5, this);
		}));

		return function fetchGetJson(_x9, _x10, _x11) {
			return ref.apply(this, arguments);
		};
	})(),
	fetchPostJson: (function () {
		var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee6(url, data, option) {
			return regeneratorRuntime.wrap(function _callee6$(_context6) {
				while (1) {
					switch (_context6.prev = _context6.next) {
						case 0:
							option = option || {};
							_context6.next = 3;
							return this.fetchJson(Object.assign({
								method: 'post',
								url: url,
								data: data
							}, option));

						case 3:
							return _context6.abrupt('return', _context6.sent);

						case 4:
						case 'end':
							return _context6.stop();
					}
				}
			}, _callee6, this);
		}));

		return function fetchPostJson(_x12, _x13, _x14) {
			return ref.apply(this, arguments);
		};
	})()
};