'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
if (typeof window != 'undefined' && typeof window.location != 'undefined') {
	window.Promise = null;
}
exports.default = {
	isInBrowser: function isInBrowser() {
		return typeof window != 'undefined' && typeof window.location != 'undefined';
	},
	isInNode: function isInNode() {
		return !this.isInBrowser();
	},
	isInWeixin: function isInWeixin() {
		return this.isInBrowser() && navigator.userAgent.match(/MicroMessenger\/[.\d]+/);
	},
	isInIos: function isInIos() {
		return this.isInBrowser() && (navigator.userAgent.match(/(iPad).*OS\s([\d_]+)/) || navigator.userAgent.match(/(iPhone\sOS)\s([\d_]+)/) || navigator.userAgent.match(/(iPod).*OS\s([\d_]+)/));
	},
	isInAndroid: function isInAndroid() {
		return this.isInBrowser() && navigator.userAgent.match(/(Android)\s+([\d.]+)/);
	},
	isInCrossApi: function isInCrossApi() {
		return this.isInBrowser() && navigator.userAgent.match(/Crossapi\/([\d.]+)/);
	},
	isInCrossWalk: function isInCrossWalk() {
		return this.isInBrowser() && navigator.userAgent.match(/Crosswalk\/([\d.]+)/);
	},
	exportGlobal: function exportGlobal(name, value) {
		if (typeof window != 'undefined') {
			window[name] = value;
		} else {
			global[name] = value;
		}
	},
	registerErrorHandler: function registerErrorHandler(handler) {
		if (!this.isInBrowser()) {
			return;
		}
		var newHandler = function newHandler() {
			var self = this;
			var selfArguments = arguments;
			setTimeout(function () {
				handler.apply(self, selfArguments);
			}, 0);
		};
		this.exportGlobal("onunhandledrejection", function (option) {
			newHandler(option.reason);
		});
		this.exportGlobal("onrejectionhandled", function (option) {
			newHandler(option.reason);
		});
		this.exportGlobal("onerror", function (errorMessage, scriptURI, lineNumber, columnNumber, error) {
			if (!error) {
				error = new Error(errorMessage);
			}
			newHandler(error);
		});
	}
};