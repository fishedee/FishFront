'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _ajax = require('../net/ajax');

var _ajax2 = _interopRequireDefault(_ajax);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } step("next"); }); }; }

exports.default = {
	fetch: (function () {
		var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
			var _args = arguments;
			return regeneratorRuntime.wrap(function _callee$(_context) {
				while (1) {
					switch (_context.prev = _context.next) {
						case 0:
							_context.next = 2;
							return _ajax2.default.fetch.apply(_ajax2.default, _args);

						case 2:
							return _context.abrupt('return', _context.sent);

						case 3:
						case 'end':
							return _context.stop();
					}
				}
			}, _callee, this);
		}));

		return function fetch() {
			return ref.apply(this, arguments);
		};
	})(),
	fetchJson: (function () {
		var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
			var _args2 = arguments;
			return regeneratorRuntime.wrap(function _callee2$(_context2) {
				while (1) {
					switch (_context2.prev = _context2.next) {
						case 0:
							_context2.next = 2;
							return _ajax2.default.fetchJson.apply(_ajax2.default, _args2);

						case 2:
							return _context2.abrupt('return', _context2.sent);

						case 3:
						case 'end':
							return _context2.stop();
					}
				}
			}, _callee2, this);
		}));

		return function fetchJson() {
			return ref.apply(this, arguments);
		};
	})()
};