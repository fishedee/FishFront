'use strict';

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } step("next"); }); }; }

var styles = StyleSheet.create({
  container: {
    width: '100%',
    height: '100%',
    margin: '0 auto',
    position: 'relative',
    overflow: 'hidden',
    /* Fix of Webkit flickering */
    zIndex: '1',

    '> .swiper-wrapper': {
      position: 'relative',
      width: '100%',
      height: '100%',
      zIndex: '1',

      display: ['-webkit-box', '-moz-box', '-ms-flexbox', '-webkit-flex', 'flex'],
      WebkitTransitionProperty: '-webkit-transform',
      MozTransitionProperty: '-moz-transform',
      OTransitionProperty: '-o-transform',
      MsTransitionProperty: '-ms-transform',
      transitionProperty: 'transform',
      WebkitBoxSizing: 'content-box',
      MozBoxSizing: 'content-box',
      boxSizing: 'content-box',

      '> .swiper-slide': {
        fontSize: '0',
        textAlign: 'center',
        width: '100%',
        //maxWidth: '700px',
        //height: '100%',
        position: 'relative',

        WebkitFlexShrink: '0',
        MsFlex: '0 0 auto',
        flexShrink: '0',

        display: ['-webkit-flex', '-webkit-box', '-ms-flexbox', 'flex'],
        WebkitBoxPack: 'center',
        MsFlexPack: 'center',
        WebkitJustifyContent: 'center',
        justifyContent: 'center',
        WebkitBoxAlign: 'center',
        MsFlexAlign: 'center',
        WebkitAlignItems: 'center',
        alignItems: 'center'
      }
    },
    '> .swiper-pagination': {
      position: 'absolute',
      zIndex: '2',
      left: '0',
      right: '15px',
      margin: '8.5px auto',
      bottom: '0',
      textAlign: 'right',
      padding: '0',

      WebkitTransition: '300ms',
      MozTransition: '300ms',
      OTransition: '300ms',
      transition: '300ms',
      WebkitTransform: 'translate3d(0, 0, 0)',
      MsTransform: 'translate3d(0, 0, 0)',
      OTransform: 'translate3d(0, 0, 0)',
      transform: 'translate3d(0, 0, 0)',

      ' > .swiper-pagination-bullet': {
        display: 'inline-block',
        marginBottom: '2px',
        marginLeft: '5px',
        backgroundColor: '#F0F0F0',
        borderRadius: '100%',
        height: '7px',
        width: '7px',
        position: 'relative',

        ':first-child': {
          marginLeft: '0'
        }
      },

      ' > .swiper-pagination-bullet-active': {
        backgroundColor: '#F95050'
      }
    }
  }
});

var uniqueValue = 1000;
function uniqueNum() {
  uniqueValue++;
  var uniqueId = '_id_' + uniqueValue;
  return uniqueId;
};

module.exports = React.createClass({
  displayName: 'exports',

  // https://github.com/thebird/Swipe#config-options
  propTypes: {
    initialSlide: React.PropTypes.number,
    speed: React.PropTypes.number,
    autoplay: React.PropTypes.number
  },
  getInitialState: function getInitialState() {
    return {
      swiperWrap: null
    };
  },
  componentDidMount: (function () {
    var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
      var _this = this;

      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.setState({
                swiperWrap: 'swiperWrap' + uniqueNum()
              });

            case 2:
              this.promise = new Promise(function (resolve, reject) {
                require.ensure([], function () {
                  var Swiper = require("swiper");
                  _this.swiper = new Swiper('.' + _this.state.swiperWrap, Object.assign({
                    paginationClickable: true,
                    pagination: '.swiper-pagination'
                  }, _this.props));
                  resolve();
                });
              });

            case 3:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    return function componentDidMount() {
      return ref.apply(this, arguments);
    };
  })(),
  componentDidUpdate: function componentDidUpdate(prevProps, propsState) {
    var _this2 = this;

    if (prevProps.children.size != this.props.children.size) {
      require.ensure([], function () {

        var Swiper = require("swiper");
        _this2.swiper = new Swiper('.' + _this2.state.swiperWrap, Object.assign({
          paginationClickable: true,
          pagination: '.swiper-pagination'
        }, _this2.props));
      });
    }
  },
  componentControl: (function () {
    var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(controlSwiper) {
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.promise;

            case 2:
              _context2.next = 4;
              return controlSwiper.promise;

            case 4:
              this.swiper.params.control = controlSwiper.swiper;

            case 5:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    return function componentControl(_x) {
      return ref.apply(this, arguments);
    };
  })(),
  render: function render() {
    return React.createElement('div', { className: (0, _classnames2.default)(this.state.swiperWrap, styles.container, this.props.className) }, React.createElement('div', { className: 'swiper-wrapper' }, React.Children.map(this.props.children, function (child, index) {
      return React.cloneElement(child, { className: 'swiper-slide' });
    })), React.createElement('div', { className: 'swiper-pagination' }, null));
  }
});