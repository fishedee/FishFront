'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _env = require('../../runtime/env');

var _env2 = _interopRequireDefault(_env);

var _model = require('./model');

var _model2 = _interopRequireDefault(_model);

var _asyncAutoCatch = require('./asyncAutoCatch');

var _asyncAutoCatch2 = _interopRequireDefault(_asyncAutoCatch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } step("next"); }); }; }

function createClass(proto) {
	if (_env2.default.isInBrowser()) {
		if (proto.onCreate) {
			proto.onCreate = (0, _asyncAutoCatch2.default)(proto.onCreate);
		}
		if (proto.onDestroy) {
			proto.onDestroy = (0, _asyncAutoCatch2.default)(proto.onDestroy);
		}
	}
	proto.getInitialState = function () {
		if (this.initialize) {
			this.initialize();
		}
		if (this.context.serverHandler) {
			this.context.serverHandler.push({
				onServerCreate: this.onServerCreate,
				onServerDestroy: this.onServerDestroy
			});
		}
		return {};
	};
	proto.loadModel = function (modelClass) {
		var modelInstanse = this.context.model.create(modelClass);
		this[modelInstanse.name] = modelInstanse;
	};
	proto.loadView = function (viewClass) {
		this.__viewClass = viewClass;
	};
	proto.getLocation = function (index) {
		var location = this.props.location;
		return location.pathname + location.search;
	};
	proto.getWebpackJson = function () {
		if (this.context.documentHead) {
			return this.context.documentHead.getWebpackJson();
		} else {
			return {};
		}
	};
	proto.componentDidMount = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
		return regeneratorRuntime.wrap(function _callee$(_context) {
			while (1) {
				switch (_context.prev = _context.next) {
					case 0:
						if (!this.onCreate) {
							_context.next = 3;
							break;
						}

						_context.next = 3;
						return this.onCreate();

					case 3:
					case 'end':
						return _context.stop();
				}
			}
		}, _callee, this);
	}));
	proto.componentWillUnmount = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
		return regeneratorRuntime.wrap(function _callee2$(_context2) {
			while (1) {
				switch (_context2.prev = _context2.next) {
					case 0:
						if (!this.onDestroy) {
							_context2.next = 3;
							break;
						}

						_context2.next = 3;
						return this.onDestroy();

					case 3:
					case 'end':
						return _context2.stop();
				}
			}
		}, _callee2, this);
	}));
	proto.go = function (url) {
		this.context.history.pushState(null, url);
	};
	proto.back = function () {
		this.context.history.goBack();
	};
	proto.replace = function (url) {
		this.context.history.replaceState(null, url);
	};
	proto.renderProps = proto.render;
	proto.render = function () {
		var ViewClass = this.__viewClass;
		var data = this.renderProps();
		data.children = this.props.children;
		return React.createElement(ViewClass, data);
	};
	proto.contextTypes = {
		model: React.PropTypes.object.isRequired,
		serverHandler: React.PropTypes.array,
		history: React.PropTypes.object.isRequired,
		documentHead: React.PropTypes.object
	};
	var ControllerClass = React.createClass(proto);

	return React.createClass({
		render: function render() {
			var location = this.props.location;
			var children = this.props.children;
			if (!children) {
				return React.createElement(ControllerClass, { key: location.key, location: location, children: children });
			} else {
				return React.createElement(ControllerClass, { location: location, children: children });
			}
		}
	});
}

var Controllers = {
	createClass: createClass
};

_env2.default.exportGlobal('Controllers', Controllers);
exports.default = Controllers;