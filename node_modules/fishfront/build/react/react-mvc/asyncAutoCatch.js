'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

exports.default = function (singleProto) {
	if (!singleProto || typeof singleProto != 'function') {
		return singleProto;
	}
	var singleProtoString = singleProto.toString();
	if (!singleProtoString.match(/apply\(this,\s*arguments\)/)) {
		return singleProto;
	}
	return _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
		var _args = arguments;
		return regeneratorRuntime.wrap(function _callee$(_context) {
			while (1) {
				switch (_context.prev = _context.next) {
					case 0:
						_context.prev = 0;
						_context.next = 3;
						return singleProto.apply(this, _args);

					case 3:
						return _context.abrupt('return', _context.sent);

					case 6:
						_context.prev = 6;
						_context.t0 = _context['catch'](0);

						alert(_context.t0);
						if (_context.t0.stack) {
							console.error(_context.t0.stack);
						}

					case 10:
					case 'end':
						return _context.stop();
				}
			}
		}, _callee, this, [[0, 6]]);
	}));
};

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } step("next"); }); }; }