'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _reactImmutableRenderMixin = require('../react-immutable-render-mixin');

var _reactImmutableRenderMixin2 = _interopRequireDefault(_reactImmutableRenderMixin);

var _immutable = require('immutable');

var _immutable2 = _interopRequireDefault(_immutable);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _env = require('../../runtime/env');

var _env2 = _interopRequireDefault(_env);

var _url = require('../../encoding/url');

var _url2 = _interopRequireDefault(_url);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var okSetState = {
	getInitialState: function getInitialState() {
		this._oldSetState = this.setState;
		this.setState = function (obj) {
			if (!this.isMounted()) {
				return;
			}
			this._oldSetState(obj);
		};
		return {};
	}
};

var serverHandlerState = {
	getInitialState: function getInitialState() {
		this.setState = function () {};
		if (this.context.serverHandler && this.componentDidMountServer) {
			this.context.serverHandler.push({
				onServerCreate: this.componentDidMountServer,
				onServerDestroy: this.componentWillUnmountServer
			});
		}
		return {};
	}
};

var __pageStackLength = 1;

function createClass(proto) {
	if (!proto.mixins) {
		proto.mixins = [];
	}
	if (_env2.default.isInBrowser()) {
		proto.mixins.push(okSetState);
	} else {
		proto.mixins.push(serverHandlerState);
	}
	proto.mixins.push(_reactImmutableRenderMixin2.default);

	proto.contextTypes = Object.assign({}, proto.contextTypes, {
		history: _react2.default.PropTypes.object.isRequired,
		serverHandler: _react2.default.PropTypes.array
	});

	proto.go = function (url) {
		var urlInfo = _url2.default.toInfo(url);
		if (_env2.default.isInBrowser()) {
			if (location.hash == '' && urlInfo.originpathname + urlInfo.originsearch == location.pathname + location.search) {
				return;
			}
		}
		this.context.history.pushState(null, urlInfo.originpathname + urlInfo.originsearch);
		__pageStackLength++;
	};
	proto.back = function () {

		if (arguments.length >= 1) {

			var popLength = -1 * parseInt(arguments[0]);
			__pageStackLength += popLength;

			if (__pageStackLength <= 0) {
				this.replace('/');
				__pageStackLength = 1;
			} else {
				this.context.history.go(popLength);
			}

			return;
		} else {
			__pageStackLength--;
		}

		if (__pageStackLength <= 0) {
			this.replace('/');
			__pageStackLength = 1;
		} else {
			this.context.history.goBack();
		}
	};
	proto.replace = function (url) {
		var urlInfo = _url2.default.toInfo(url);
		this.context.history.replaceState(null, urlInfo.originpathname + urlInfo.originsearch);
	};
	return _react2.default.createClass(proto);
}

var Views = {
	createClass: createClass
};

_env2.default.exportGlobal('Views', Views);
_env2.default.exportGlobal('React', _react2.default);
_env2.default.exportGlobal('Immutable', _immutable2.default);
exports.default = Views;