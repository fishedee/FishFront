'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var style = StyleSheet.create({
	root: {
		position: 'relative',
		overflow: 'hidden'
	},
	content: {},
	placeholder: {
		position: 'absolute',
		display: 'none',
		left: '0px',
		right: '0px',
		top: '0px',
		fontSize: '16px',
		color: 'grey'
	}
});

exports.default = React.createClass({
	displayName: 'react-rich-editor',

	getDefaultProps: function getDefaultProps() {},
	_selection: function _selection(node) {
		document.getSelection().removeAllRanges();
		var range = document.createRange();
		range.setStart(node[0], 0);
		range.collapse(true);
		document.getSelection().addRange(range);
	},
	_setEmptyHtml: function _setEmptyHtml() {
		var emptyP = '<p><br/></p>';
		this._inputElement.innerHTML = emptyP;
		this._selection(this._inputElement.querySelectorAll('p'));
	},
	_checkPlaceHolder: function _checkPlaceHolder() {
		var self = this;
		var text = self._inputElement.textContent;
		var hasImage = self._inputElement.querySelectorAll("img").length > 0;
		if (hasImage == false && text == '') self._placeholderElement.style.display = "block";else self._placeholderElement.style.display = "none";
	},
	_initEvent: function _initEvent() {
		var self = this;
		self._inputElement.addEventListener('input', function (e) {
			self._checkPlaceHolder();
			if (self._inputElement.innerHTML == '') {
				self._setEmptyHtml();
				e.preventDefault();
			}
			if (self.props.onChange) {
				self.props.onChange(self._inputElement.innerHTML);
			}
		});
	},
	_initProps: function _initProps(props) {
		//设置html
		if (props.value != this._inputElement.innerHTML) {
			this._inputElement.innerHTML = props.value;
		}
		if (this._inputElement.innerHTML == '') {
			this._setEmptyHtml();
		}
		//设置placeholder
		if (this.props.placeholder.indexOf('\n') != -1) {
			this._placeholderElement.textContent = '';
			var placeholder = this.props.placeholder.split('\n');
			for (var i = 0; i != placeholder.length; ++i) {
				var eleP = document.createElement('p');
				eleP.innerHTML = placeholder[i];
				this._placeholderElement.appendChild(eleP);
			}
		} else {
			this._placeholderElement.textContent = this.props.placeholder;
		}
		// this._placeholderElement.textContent = this.props.placeholder ;
		//check placeholder
		this._checkPlaceHolder();
	},
	bold: function bold() {
		document.execCommand("bold", "false", null);
	},
	insertHtml: function insertHtml(html) {
		document.execCommand("insertHtml", "false", html);
	},
	insertImage: function insertImage(src) {
		document.execCommand("insertImage", "false", src);
	},
	insertImageWithNewParagraph: function insertImageWithNewParagraph(src) {
		var image = '<p><img src="' + src + '" style="max-width:80%;"></p>';
		this._inputElement.insertAdjacentHTML("beforeend", image);
		if (this.props.onChange) {
			this.props.onChange(this._inputElement.innerHTML);
		}
	},
	componentDidMount: function componentDidMount() {
		this._inputElement = this.refs.input;
		this._placeholderElement = this.refs.placeholder;
		this._initProps(this.props);
		this._initEvent();
	},
	componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
		this._initProps(nextProps);
	},
	render: function render() {
		return React.createElement('div', { className: (0, _classnames2.default)(style.root, this.props.className), style: this.props.style }, React.createElement('div', { className: (0, _classnames2.default)(style.content, 'needsclick'), ref: 'input', autoFocus: 'true', contentEditable: 'true', id: this.props.id }), React.createElement('div', { className: style.placeholder, ref: 'placeholder' }));
	}
});