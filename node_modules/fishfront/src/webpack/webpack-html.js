import _ from 'underscore';
import fs from 'fs';

function delOutput( context,output ){
	var filename = context +"/"+output
	if( fs.existsSync(filename)){
		var fileInfo = fs.lstatSync( filename)
		if( fileInfo.isDirectory() ){
			var filenames = fs.readdirSync( filename )
			for( var i = 0 ; i != filenames.length ; ++i ){
				delOutput( filename,filenames[i])
			}
			fs.rmdirSync( filename )
		}else{
			fs.unlinkSync(filename)
		}
	}
	
}

function getAllEntryFile( context , entry ){
	var filenames = fs.readdirSync(context+"/"+entry);
	var result = {};
	for( var i = 0 ; i != filenames.length ; ++i ){
		var singleFileName = filenames[i];
		if( singleFileName == "." ){
			continue;
		}else if( singleFileName== ".."){
			continue;
		}
		var fileInfo = fs.lstatSync( context +"/"+entry+"/"+singleFileName )
		if( fileInfo.isFile() ){
			if( singleFileName.endsWith(".js") == false ){
				continue;
			}
			singleFileName = singleFileName.substr(0,singleFileName.length-3)
			result[singleFileName] = "";
		}else if( fileInfo.isDirectory() ){
			result[singleFileName] = getAllEntryFile( context + "/" + entry ,  singleFileName);
		}
	}
	return result;
}

function getAllEntryFileHtmlInner(context , entryFiles , template){
	var result = {}
	for( var i in entryFiles ){
		var singleEntryName = i;
		var singleEntryFile = entryFiles[i];
		if( typeof singleEntryFile == "string"){
			var singleResult = template({name:singleEntryName});
		}else{
			var singleResult = getAllEntryFileHtmlInner( context , singleEntryFile , template );
		}
		result[ singleEntryName ] = singleResult;
	}
	return result;
}
function getAllEntryFileHtml( context , entryFiles , template ){
	var templateFile = fs.readFileSync(context+"/"+template).toString();
	var template = _.template(templateFile);
	return getAllEntryFileHtmlInner( context , entryFiles , template )
}

function createOutputInner( context , entryFilesAndHtml ){
	for( var i in entryFilesAndHtml ){
		var singleEntryFileName = i;
		var singleEntryFileHtml = entryFilesAndHtml[i];
		if( typeof singleEntryFileHtml == "string"){
			fs.writeFileSync( context +"/"+singleEntryFileName+".html" , singleEntryFileHtml );
		}else{
			fs.mkdirSync( context + "/"+singleEntryFileName )
			createOutputInner( context + "/" + singleEntryFileName , singleEntryFileHtml )
		}
	}
}

function createOutput( context , output , entryFilesAndHtml ){
	fs.mkdirSync( context + "/" + output )
	createOutputInner( context + "/" + output , entryFilesAndHtml )
}

function getWebpackEntry( entry,output , entryFiles ){
	var result = {}
	for( var i in entryFiles ){
		var singleEntryName = i
		var singleEntryFile = entryFiles[i]
		if( typeof(singleEntryFile) == "string"){
			var singleResult = {}
			singleResult[output + "/" + singleEntryName] = "./"+entry +"/"+singleEntryName
		}else{
			var singleResult = getWebpackEntry( entry + "/" + singleEntryName , output + "/" + singleEntryName , singleEntryFile )
		}
		result = _.extend(result,singleResult)
	}
	return result
}

function getWebpackOption( context,entry,output,entryFiles , option ){
	var webpackOption = option;
	webpackOption.context = context
	webpackOption.entry = getWebpackEntry( entry,output, entryFiles )
	webpackOption.output = {
		publicPath: '/',
        filename: '[name].js'   
	}
	return webpackOption;
}

function go( webpackOption ){
	var context = webpackOption.context;
	var output = webpackOption.output;
	var entry = webpackOption.entry;
	var template = webpackOption.template;
	var option = webpackOption.option;

	delOutput( context , output )
	var entryFiles = getAllEntryFile( context , entry )
	var entryFilesAndHtml = getAllEntryFileHtml( context , entryFiles , template )
	createOutput( context , output , entryFilesAndHtml )

	return getWebpackOption(context,entry,output,entryFiles,option)
}
module.exports = go;