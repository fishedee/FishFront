function buildHtml(labelName, labelArgv) {
	var result = '<' + labelName;
	for (var i in labelArgv) {
		result += ' ' + i + '="' + labelArgv[i] + '"';
	}
	result += '></' + labelName + '>';
	return result;
}
function buildStyle(styleArgv) {
	var result = '';
	for (var i in styleArgv) {
		result += ' ' + i + ':' + styleArgv[i] + ';';
	}
	return result;
}
function replaceQQVideo2(content, articleWith) {
	var qqVideoRegex = /<embed.*?src="http(s?):\/\/v.qq.com\/.*?\/([^\/]*?)\.html.*?".*?width="(.*?)".*?height="(.*?)".*?\/>/img;
	var qqVideoWidth = articleWith;
	var qqVideoHeight = Math.ceil(qqVideoWidth / 1.5);
	var qqVideoSrc = 'https://v.qq.com/iframe/player.html?vid=$2&width=' + qqVideoWidth + '&height=' + qqVideoHeight + '&auto=0';
	var qqVideoStyle = buildStyle({
		'z-index': '1',
		'height': qqVideoHeight + 'px !important',
		'width': qqVideoWidth + 'px !important',
		'overflow': 'hidden'
	});
	var qqVideoReplace = buildHtml(
		'iframe',
		{
			'class': 'video_iframe',
			'style': qqVideoStyle,
			'height': qqVideoHeight + 'px',
			'width': qqVideoWidth + 'px',
			'frameborder': '0',
			'data-src': qqVideoSrc,
			'src': qqVideoSrc,
			'allowfullscreen': '',
			'scrolling': 'no'
		}
	);
	content = content.replace(qqVideoRegex, qqVideoReplace);
	return content;
}
function replaceQQVideo(content, articleWith) {
	var qqVideoRegex = /<embed.*?src="http(s?):\/\/static.video.qq.com\/TPout.swf\?vid=(.*?)".*?width="(.*?)".*?height="(.*?)".*?\/>/img;
	var qqVideoWidth = articleWith;
	var qqVideoHeight = Math.ceil(qqVideoWidth / 1.5);
	var qqVideoSrc = 'https://v.qq.com/iframe/player.html?vid=$2&width=' + qqVideoWidth + '&height=' + qqVideoHeight + '&auto=0';
	var qqVideoStyle = buildStyle({
		'z-index': '1',
		'height': qqVideoHeight + 'px !important',
		'width': qqVideoWidth + 'px !important',
		'overflow': 'hidden'
	});
	var qqVideoReplace = buildHtml(
		'iframe',
		{
			'class': 'video_iframe',
			'style': qqVideoStyle,
			'height': qqVideoHeight + 'px',
			'width': qqVideoWidth + 'px',
			'frameborder': '0',
			'data-src': qqVideoSrc,
			'src': qqVideoSrc,
			'allowfullscreen': '',
			'scrolling': 'no'
		}
	);
	content = content.replace(qqVideoRegex, qqVideoReplace);
	return content;
}
function replaceImage(content) {
	let tag = 'img'
	let style = 'width:100%;'

	let tagRegex = new RegExp(`<${tag}(.*?)>`, 'ig')
	let tagReplace = `<${tag} $1 style="${style}">`
	let tagRegex2 = new RegExp(`<${tag}(.*?)/>`, 'ig')
	let tagReplace2 = `<${tag} $1 style="${style}"/>`

	let styleRegex = /style=\"(.*?)\"/ig;

	content = content.replace(tagRegex, (match) => {
		if (match.match(styleRegex)) {
			match = match.replace(styleRegex, `style="$1;${style}"`)
		} else {
			if (match.match(tagRegex2)) {
				match = match.replace(tagRegex2, tagReplace2)
			} else {
				match = match.replace(tagRegex, tagReplace)
			}
		}
		return match;
	});

	return content;
}
export default {
	parse: function (content, articleWith) {

		content = replaceQQVideo(content, articleWith);

		content = replaceQQVideo2(content, articleWith);

		content = replaceImage(content);

		return content;
	},
	replaceTagStyle(content, tag, style) {

		if (!content) {
			return content
		}

		let tagRegex = new RegExp(`<${tag}(.*?)>`, 'ig')
		let tagReplace = `<${tag} $1 style="${style}">`
		let tagRegex2 = new RegExp(`<${tag}(.*?)/>`, 'ig')
		let tagReplace2 = `<${tag} $1 style="${style}"/>`

		let styleRegex = /style=\"(.*?)\"/ig;

		content = content.replace(tagRegex, (match) => {
			if (match.match(styleRegex)) {
				match = match.replace(styleRegex, `style="$1;${style}"`)
			} else {
				if (match.match(tagRegex2)) {
					match = match.replace(tagRegex2, tagReplace2)
				} else {
					match = match.replace(tagRegex, tagReplace)
				}
			}
			return match;
		});

		return content;
	}
}