if(  typeof window != 'undefined' && typeof window.location != 'undefined' ){
	window.Promise = null;
}
export default {
	isInBrowser(){
		return typeof window != 'undefined' && typeof window.location != 'undefined';
	},
	isInNode(){
		return !this.isInBrowser();
	},
	isInWeixin(){
		return this.isInBrowser() && navigator.userAgent.match(/MicroMessenger\/[.\d]+/)
	},
	isInIos(){
		return this.isInBrowser() && (navigator.userAgent.match(/(iPad).*OS\s([\d_]+)/) || navigator.userAgent.match(/(iPhone\sOS)\s([\d_]+)/) || navigator.userAgent.match(/(iPod).*OS\s([\d_]+)/))
	},
	isInAndroid(){
		return this.isInBrowser() && navigator.userAgent.match(/(Android)\s+([\d.]+)/)
	},
	isInCrossApi(){
		return this.isInBrowser() && navigator.userAgent.match(/Crossapi\/([\d.]+)/)
	},
	isInCrossWalk(){
		return this.isInBrowser() && navigator.userAgent.match(/Crosswalk\/([\d.]+)/)
	},
	exportGlobal(name,value){
		if( typeof window != 'undefined' ){
			window[name] = value;
		}else{
			global[name] = value;
		}
	},
	registerErrorHandler(handler){
		if( !this.isInBrowser() ){
			return;
		}
		var newHandler = function(){
			var self = this;
			var selfArguments = arguments;
			setTimeout(function(){
				handler.apply(self,selfArguments);
			},0);
		}
		this.exportGlobal("onunhandledrejection",function(option){
			newHandler(option.reason);
		});
		this.exportGlobal("onrejectionhandled",function(option){
			newHandler(option.reason);
		});
		this.exportGlobal("onerror",function(errorMessage, scriptURI, lineNumber,columnNumber,error){
			if( !error ){
				error = new Error(errorMessage)
			}
			newHandler(error);
		});
	}
};