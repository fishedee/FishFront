import {Mvc,Router,Route,IndexRoute} from './react-mvc';
import Model from './react-mvc/model';
import ReactDOM from 'react-dom/server';
import { match, RoutingContext } from 'react-router';
import StyleSheet from './react-style';
import DocumentHead from './react-document-head-provider';

import Express from 'express';
import Compress from 'compression';
import Webpack from 'webpack';
import WebpackMiddleware from '../webpack/webpack-dev-middleware';
import RequireReload from '../runtime/reload';
import Fs from 'fs';

function routerRender(router,url){
	return new Promise((resolve,reject)=>{
		match({routes:router,location:url},(error,redirectLocation,renderProps)=>{
			if( error ){
				resolve({status:500,msg:error.message});
			}else if( redirectLocation ){
				resolve({status:302,msg:redirectLocation.pathname + redirectLocation.search});
			}else if( renderProps ){
				resolve({status:200,msg:renderProps});
			}else{
				resolve({status:404,msg:'File not found'});
			}
		});
	});
}

class MvcServer extends Mvc{
	construcotr(){
		super.construcotr();
		this.routeInstance = null;
		this.webpackConfig = null;
		this.webpackJson = null;
		this.webpackJsonConfig = {};
		this.staticDir = null;
		this.development = true;
		this.port = 1616;
	}
	setWebPackConfig(webpackConfig){
		this.webpackConfig = webpackConfig;
	}
	setPort(port){
		this.port = port;
	}
	setStaticDir(staticDir){
		this.staticDir = staticDir;
	}
	setWebPackJson(webpackJson){
		this.webpackJson = webpackJson;
	}
	async renderSingleModel(renderProps,model,index){
		var ModelProvider = Model.Provider;
		var serverHandler = [];
		ReactDOM.renderToString(
			<ModelProvider model={model} serverHandler={serverHandler}>
				<RoutingContext {...renderProps}/>
			</ModelProvider>
		);
		if( index < serverHandler.length &&
			 serverHandler[index].onServerCreate ){
			await serverHandler[index].onServerCreate();
		}
		if( index < serverHandler.length &&
			 serverHandler[index].onServerDestroy ){
			await serverHandler[index].onServerDestroy();
		}
		if( index + 1 < serverHandler.length ){
			return index + 1;
		}else{
			return null;
		}
	}
	async renderToString(req,resp){
		//ÂØªÊâæË∑ØÁî±
		var routerResult = await routerRender(this.routeInstance,req.url);
		if( routerResult.status == 500 ){
			resp.status(500).send(routerResult.msg);
			return null;
		}else if( routerResult.status == 302 ){
			resp.redirect(302,routerResult.msg);
			return null;
		}else if( routerResult.status == 404 ){
			resp.status(404).send(routerResult.msg);
			return null;
		}else{
			//È¶ñÊ¨°Ê∏≤ÊüìËé∑ÂèñÊï∞ÊçÆ
			var model = new Model.Store();
			model.setServerRequest(req);
			var index = 0;
			while( index != null ){
				index = await this.renderSingleModel(routerResult.msg,model,index);
			}
			var data = model.serialize();

			//‰∫åÊ¨°Ê∏≤ÊüìËé∑Âèñhtml
			var ModelProvider = Model.Provider;
			var DocumentHeadProvider = DocumentHead.Provider;
			var documentHead = new DocumentHead.DocumentHead();
			documentHead.setWebpackJson(this.webpackJsonConfig);

			var routerResult = await routerRender(this.routeInstance,req.url);
			var renderProps = routerResult.msg;
			var html = ReactDOM.renderToString(
				<DocumentHeadProvider documentHead={documentHead}>
					<ModelProvider model={model}>
						<RoutingContext {...renderProps}/>
					</ModelProvider>
				</DocumentHeadProvider>
			);

			//ÁîüÊàêstylesheet
			var style = StyleSheet.renderToString(html);

			var result = (
`<!DOCTYPE html>
<html>
    <head>
       	${documentHead.renderMetaString()}
       	${documentHead.renderTitleString()}
       	${documentHead.renderBaseString()}
       	${documentHead.renderLinkString()}
       	${style}
    </head>
    <body>
        <div id="body">${html}</div>
        <script>window.__INIT_STATE__=${data}</script>
        ${documentHead.renderScriptString()}
    </body>
</html>
`
);
			resp.send(result);
		}
	}
	getMiddleware(){
		var self = this;
		var middleware = async (req,resp,next)=>{
			try{
		        await self.renderToString(req,resp);
		    }catch(e){
		        resp.status(500).send('nodejs server error');
		        console.error(e.stack);
		    }
		}
		return middleware.bind(this);
	}
	readWebpackJson(){
		try{
			var file = Fs.readFileSync(this.webpackJson,'utf-8');
			this.webpackJsonConfig = JSON.parse(file);
		}catch(e){
			console.error(e);
			this.webpackJsonConfig = {};
		}
	}
	run(){
		var self = this;
		var app = new Express();
		var port = this.port;
		app.use(Compress());
		//ËØªÂèñwebpackJson
		self.readWebpackJson();

		if (process.env.NODE_ENV === 'production'){
			//Ëé∑ÂèñË∑ØÁî±
			var routeInstance = require(self.route);
			app.use(async(req,resp,next)=>{
				try{
					routeInstance = routeInstance && routeInstance.__esModule ? routeInstance : { default: routeInstance }; 
					self.routeInstance = routeInstance.default;
					await self.renderToString(req,resp,next);
				}catch(e){
					resp.status(500).send('nodejs server error');
			        console.error(e.stack);
				}
			});
		}else{
			app.set('etag',true);
			app.set('etag','strong');
			//ÂêØÂä®ÈùôÊÄÅÁõÆÂΩï
			if( this.staticDir ){
				app.use(Express.static(this.staticDir));
			}
			//ÂêØÂä®webpackÁÉ≠ÁºñËØë
			if( this.webpackConfig ){
				var compiler = Webpack(this.webpackConfig);	
				app.use(WebpackMiddleware(compiler,{
					hot:true,
					stats: {
						colors: true
					}
				}));
			}
			//ÂêØÂä®ÂêéÁ´ØÁÉ≠
			var requireReload = RequireReload(require,{noLibrary:true});
			app.use(async (req,resp,next)=>{
				try{
					self.readWebpackJson();
					var routeInstance = requireReload(self.route);
					routeInstance = routeInstance && routeInstance.__esModule ? routeInstance : { default: routeInstance }; 
					self.routeInstance = routeInstance.default;
					await self.renderToString(req,resp,next);
				}catch(e){
					resp.status(500).send('nodejs server error');
			        console.error(e.stack);
				}
			});
		}
		app.listen(port, function(error) {
		  	if (error) {
		    	console.error(error);
		  	}else{
		    	console.info("==> üåé  Listening on port %s. Open up http://localhost:%s/ in your browser.", port, port);
		  	}
		});
	}
}

export default MvcServer;