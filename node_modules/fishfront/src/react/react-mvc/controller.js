import Env from '../../runtime/env';
import Model from './model';
import AsyncAutoCatch from './asyncAutoCatch';

function createClass(proto){
	if( Env.isInBrowser() ){
		if( proto.onCreate ){
			proto.onCreate = AsyncAutoCatch(proto.onCreate);
		}
		if( proto.onDestroy ){
			proto.onDestroy = AsyncAutoCatch(proto.onDestroy);
		}
	}
	proto.getInitialState = function(){
		if( this.initialize ){
			this.initialize();
		}
		if( this.context.serverHandler ){
			this.context.serverHandler.push({
				onServerCreate:this.onServerCreate,
				onServerDestroy:this.onServerDestroy,
			});
		}
		return {};
	}
	proto.loadModel = function(modelClass){
		var modelInstanse = this.context.model.create(modelClass);
		this[modelInstanse.name] = modelInstanse;
	}
	proto.loadView = function(viewClass){
		this.__viewClass = viewClass;
	}
	proto.getLocation = function(index){
		var location = this.props.location;
		return location.pathname + location.search;
	}
	proto.componentDidMount = async function(){
		if( this.onCreate ){
			await this.onCreate();
		}
	}
	proto.componentWillUnmount = async function(){
		if( this.onDestroy ){
			await this.onDestroy();
		}
	}
	proto.go = function(url){
		this.context.history.pushState(null,url);
	}
	proto.back = function(){
		this.context.history.goBack();
	}
	proto.replace = function(url){
		this.context.history.replaceState(null,url);
	}
	proto.renderProps = proto.render;
	proto.render = function(){
		var ViewClass = this.__viewClass;
		var data = this.renderProps();
		data.children = this.props.children;
		return (<ViewClass {...data}/>);
	}
	proto.contextTypes = {
        model: React.PropTypes.object.isRequired,
        serverHandler: React.PropTypes.array,
        history: React.PropTypes.object.isRequired,
    }
	var ControllerClass = React.createClass(proto);

	return React.createClass({
		render(){
			var location = this.props.location;
			var children = this.props.children;
			if( !children ){
				return (<ControllerClass key={location.key} location={location} children={children}/>);
			}else{
				return (<ControllerClass location={location} children={children}/>);
			}
		}
	});
}

var Controllers = {
	createClass:createClass
};

Env.exportGlobal('Controllers',Controllers);
export default Controllers;