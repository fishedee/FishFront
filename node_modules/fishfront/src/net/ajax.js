import isofetch from 'isomorphic-fetch';
import Param from '../encoding/param';
import Env from 'fishfront/runtime/env';

export default {
	async _fetchInner(option){
		var url = option.url;
		if( url.indexOf('?') == -1 ){
			url += "?";
		}else{
			url += "&";
		}
		url += "_t=" + new Date().valueOf();
		option.data = await this.makeToken(option.data)
		// console.log('BEFORE_ENCODE', option)
		var urlOption = {};
		if( option.xhrFields && option.xhrFields.withCredentials ){
			urlOption['credentials'] = 'include';
		}
		if( option.headers ){
			urlOption.headers = option.headers;
		}
		if( !option.method || option.method == "get"){
			url += "&" + Param.encode(option.data);
		}else{
			urlOption.method = 'post';
			urlOption.body = Param.encode(option.data);
		}
		return isofetch(url,urlOption);
	},
	ajax(option){
		function fireSuccess(success){
			if( option.success ){
				option.success(success);
			}
		}
		function fireError(error){
			if( option.error ){
				option.error(null,error);
			}
		}
		return this._fetchInner(option)
			.then(function(response){
				if( response.status != 200 ){
					if( Env.isInBrowser() ){
						throw new Error('错误码不是200，是'+response.status);
					}else{
						throw new Error('错误码不是200，是'+response.status+";option:"+JSON.stringify(option)+';'+JSON.stringify(response));
					}
					
				}
				return response.text();
			})
			.then(fireSuccess)
			.catch(fireError);
	},
	get(url,data,success,option){
		option = option || {};
		return this.ajax(Object.assign({
			method:'get',
			url:url,
			data:data,
			success:success
		},option));
	},
	post(url,data,success,option){
		option = option || {};
		return this.ajax(Object.assign({
			method:'post',
			url:url,
			data:data,
			success:success
		},option));
	},
	async fetch(option){
		var response = await this._fetchInner(option);
		if( response.status != 200 ){
			if( Env.isInBrowser() ){
				throw new Error('错误码不是200，是'+response.status);
			}else{
				throw new Error('错误码不是200，是'+response.status+";option:"+JSON.stringify(option)+';'+JSON.stringify(response));
			}
		}
		var text = await response.text();
		return text;
	},
	async fetchGet(url,data,option){
		option = option || {};
		return await this.fetch(Object.assign({
			method:'get',
			url:url,
			data:data
		},option));
	},
	async fetchPost(url,data,option){
		option = option || {};
		return await this.fetch(Object.assign({
			method:'post',
			url:url,
			data:data
		},option));
	},
	async fetchJson(option){
		var text = await this.fetch(option);
		try{
			var json = JSON.parse(text);
		}catch (error){
			if( Env.isInBrowser() ){
				throw new Error("服务器错误，返回的是非法的json格式数据");
			}else{
				var dataString = option.data;
				if(dataString instanceof Object){
					dataString = JSON.stringify(dataString);
				}
				var parseError = new Error('JSON解析错误:'+option.url+'|'+dataString+'|'+text);
				parseError.stack = error.stack;
				throw parseError;
			}
		}
		return json;
	},
	async fetchGetJson(url,data,option){
		option = option || {};
		return await this.fetchJson(Object.assign({
			method:'get',
			url:url,
			data:data
		},option));
	},
	async fetchPostJson(url,data,option){
		option = option || {};
		return await this.fetchJson(Object.assign({
			method:'post',
			url:url,
			data:data
		},option));
	},
	async makeToken(data){
		// console.log('data',data)
		if(data && data.csrfToken){
            delete data.csrfToken;
        }
		// console.log(data)
        if(!data){
           	data = {}
		}

        data.timestamp = new Date().valueOf();
        var arr = Object.keys(data);
        var sortArg = []
        arr.forEach(function(key){
            // console.log(key)
            // console.log(data[key])
            // console.log("instanceof Array",data[key] instanceof Array)
            // console.log("instanceof Object",data[key] instanceof Object)
            // if (data[key] instanceof Object){
            // 	console.log("length",key,data[key].length)
            // }
            if(data[key] instanceof Array){
            	// console.log("length",key,data[key].length)
            	if (data[key].length > 0){
            		data[key].sort();
            		// console.log("data[key]",data[key])
	            	var arrayString = "["
	            	var is0 = false;
	            	data[key].forEach(function(key2){
            			if(!is0){
	            			is0 = true;
	            		}else{
	            			arrayString += " "
	            		}
	            		if (key2 instanceof Object){

		            		// console.log("instanceof Object",key2 instanceof Object)
		            		// console.log("key2:",key2)
		            		arrayString += "map["
		            		var sortArg2 = [];
							for(let i in key2){
								sortArg2.push(i+":"+key2[i])
							}
							sortArg2.sort()
							arrayString += sortArg2.join(" ")
							arrayString += "]"
	            		}else{
		            		arrayString += key2
	            		}
	         
	            	});
	            	arrayString += "]"
	            	sortArg.push(key+"="+arrayString)
            	}
            }else{
            	if (data[key] != undefined && data[key] !== ""){
            		// console.log("v:",key+"="+data[key])
            		sortArg.push(key+"="+data[key])
            	}
            }
        });

        sortArg.sort()
        var s = sortArg.join("&")
        // console.log(s)
        await hbbEncrypt.ready()
        var mima = hbbEncrypt.AsciiToString(
            hbbEncrypt._encryption(
                hbbEncrypt.allocateUTF8(
                    s
                )
            )
        )
        // console.log(mima)
        data.csrfToken = mima
         
         return data
    },
}